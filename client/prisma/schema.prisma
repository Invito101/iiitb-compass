generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    phone         String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    CabShare       CabShare[]
    LostAndFound   LostAndFound[]
    FoodItemRating FoodItemRating[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CabShare {
    id          String   @id @default(cuid())
    origin      String
    destination String
    date        DateTime
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model LostAndFound {
    id              String   @id @default(cuid())
    name            String
    description     String
    date            DateTime
    image           String?
    currentLocation String?
    location        String
    type            String

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FoodMenuItems {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?

    // Dietary restrictions -> "veg", "non-veg", "egg", "vegan", "jain"
    dietType String[]

    FoodMenuEntries FoodMenuEntries[]
}

model FoodItemRating {
    id       String  @id @default(cuid())
    rating   Int
    comment  String?
    status   String
    imageUrl String?

    foodMenuEntryId String
    foodMenuEntry   FoodMenuEntries @relation(fields: [foodMenuEntryId], references: [id], onDelete: Cascade)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model FoodMenuCycle {
    id String @id @default(cuid())

    startDate       DateTime
    endDate         DateTime
    weekNumber      Int
    FoodMenuEntries FoodMenuEntries[]
}

model FoodMenuEntries {
    id String @id @default(cuid())

    foodMenuCycleId String
    foodMenuCycle   FoodMenuCycle @relation(fields: [foodMenuCycleId], references: [id], onDelete: Cascade)

    foodItemId String
    foodItem   FoodMenuItems @relation(fields: [foodItemId], references: [id], onDelete: Cascade)
    dayOfWeek  String
    mealType   String

    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    FoodItemRating FoodItemRating[]
}
